<% layout("./layouts/boilerplate") %>

  <h1>Objects</h1>
  <p>They are collections of properties.</p>
  <p>
    We need a variable first followed by an equal sign, and all the properties
    will be inside two curly braces.
  </p>
  <p>It needs a key, a colon and a value.</p>
  <p>Each pair is separated by a comma.</p>
  <p>The pair together is a property.</p>
  <p>
    We can have different types of values, they don't have to be all the same.
  </p>
  <p>
    They sometimes do not look like objects, like an array, which typeOf tells
    us is an object.
  </p>
  <p>The order of the properties is not important here.</p>
  <img src="addressObject.png" alt="" />
  <p>
    This object has numbers and strings, but it can have arrays or other
    things too.
  </p>
  <img src="productObject.png" alt="" />
  <h2>Accessing data from objects</h2>
  <p>
    We can use square brackets with the key in quotes. Like when accessing
    array items.(bracket notation)
  </p>
  <p>
    Or a dot/period followed by the name of the key, no quotes needed.(dot
    notation)
  </p>

  <img src="accessingObjectData.png" alt="" />
  <p>All keys are converted to strings.</p>
  <p>If we use the square brackets version, we can do many more things.</p>
  <p>
    We can call our keys anything we want, like have them start with a number,
    have strings with spaces inside, make our keys variables to access them
    later.
  </p>
  <p>
    If our key starts with a number, we can not access it through dot notation.
  </p>
  <p>
    If it is a simple integer, we can use square brackets without quotes, if
    it is a decimal number, we WILL need quotes.
  </p>
  <h2>Reusing Object Data</h2>
  <p>We can take the values for our keys to make a string:</p>
  <img src="reusingObjectData.png" alt="" />